@using Attribute_Reflection_UseCase1_DisplayOnly_Templates.Templates
@using Attribute_Reflection_UseCase1_Display_Templates.Helpers
@using Attribute_Reflection_UseCase1_Display_Templates.Templates
@using System.Reflection
@using System.Collections
@using Models
@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase1

@if (Model != null)
{
	@foreach (var item in Model.GetType().GetProperties())
	{
		TemplateResult template = this.DecideTemplate(item);

		var parameters = new Dictionary<string, object>()
		{
			{"Value", template.Value},
			{"Label", template.Label}
		};

		<DynamicComponent Type=template.TemplateType Parameters="parameters"></DynamicComponent>
		<br />
	}
}

@code {
	[Parameter]
	public SensorData? Model { get; set; }

	[Parameter]
	public PerformanceMonitor? PerformanceMonitor { get; set; }

	protected override void OnInitialized()
	{
		Model!.StateHasChanged += (_, _) => this.StateHasChanged();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			PerformanceMonitor!.Stop();
		}
	}

	private TemplateResult DecideTemplate(PropertyInfo info)
	{
		var asm = Assembly.GetExecutingAssembly();
		var templates = asm.GetTypes().Where(t => typeof(TemplateBase).IsAssignableFrom(t)).ToArray();
		var attributes = info.GetCustomAttributes().ToArray();

		if (info.PropertyType == typeof(double))
		{
			return GetDoubleTemplate(templates, attributes, info);
		}
		else if (info.PropertyType == typeof(bool))
		{
			return GetBoolTemplate(templates, attributes, info);
		}
		else
		{
			throw new NotImplementedException();
		}
	}

	private TemplateResult GetBoolTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(bool)).ToArray();
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Model);

		return new TemplateResult(template, Convert.ToBoolean(value), info.Name);
	}

	private TemplateResult GetDoubleTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(double)).ToArray();
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Model);

		return new TemplateResult(template, value!, info.Name);
	}

	private Type ApplyFurtherTemplateConstraints(IEnumerable<Type> templates, Attribute[] attributes)
	{
		bool isEditable = attributes.Any(a => a.GetType() == typeof(EditableAttribute));

		if (isEditable)
		{
			templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(EditableAttribute))).ToArray();
		}

		if (templates.Count() > 1)
		{
			throw new InvalidOperationException("Property meta data not specific enough. Could not map to single template");
		}
		else if (!templates.Any())
		{
			throw new InvalidOperationException("No matching template found.");
		}

		return templates.First();
	}

}