@using Attribute_Reflection_UseCase1_Display_Templates.Templates
@using System.Reflection
@using System.Collections
@using Models
@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase1

@if (Model != null)
{
	@foreach (var item in Model.GetType().GetProperties())
	{
		bool isReadOnly = item.GetCustomAttributes().Any(p => p.GetType() == typeof(ReadOnlyAttribute));
		var typeAndValue = this.GetTypeValueTuple(item);
		<DynamicComponent Type=typeAndValue.Item1 Parameters="@(new Dictionary<string, object>(){{"Value", typeAndValue.Item2}, {"Label", typeAndValue.Item3}, {"ReadOnly", isReadOnly}})"></DynamicComponent>
		<br />
	}
}

@code {
	[Parameter]
	public SensorData? Model { get; set; }

	[Parameter]
	public PerformanceMonitor? PerformanceMonitor { get; set; }

	private Dictionary<Type, Type> typeMap;

	protected override void OnInitialized()
	{
		Model!.StateHasChanged += (_, _) => this.StateHasChanged();

		typeMap = new Dictionary<Type, Type>()
		{
			{typeof(double), typeof(DoubleTemplate)},
			{typeof(bool), typeof(BoolTemplate)},
		};
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			PerformanceMonitor!.Stop();
		}
	}

	private (Type, object, string) GetTypeValueTuple(PropertyInfo property)
	{
		Type[] basics = new Type[]
			{
			typeof(string),
			typeof(double),
			typeof(bool),
			};

		if (basics.Contains(property.PropertyType))
		{
			return (typeMap[property.PropertyType], property.GetValue(Model)!, property.Name);
		}
		else
		{
			throw new Exception();
		}
	}
}