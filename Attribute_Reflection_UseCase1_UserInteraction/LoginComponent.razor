@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase1
@using System.Reflection.Metadata
@using System.Reflection
@using Radzen

@inject DialogService DialogService

@if (Data != null)
{
    foreach (var property in Data.GetType().GetProperties())
    {
        <div class="row">@GetRenderFragment(property)</div>
    }

    if (Data.GetType().GetCustomAttributes().Any(p => p.GetType() == typeof(AuthenticationFormAttribute)))
    {
        <Radzen.Blazor.RadzenButton class=mt-3 Click="HandleLogin" Text=Login></Radzen.Blazor.RadzenButton>
        <Radzen.Blazor.RadzenButton class=mt-3 Click=HandleRegistration Text=Register></Radzen.Blazor.RadzenButton>
    }
}

@code {
    [Parameter]
    public LoginModel? Data { get; set; }

    private RenderFragment GetRenderFragment(PropertyInfo propertyInfo)
    {
        if (propertyInfo.PropertyType == typeof(string))
        {
            return GetStringFragment(propertyInfo);
        }
        else
        {
            throw new NotImplementedException();
        }
    }

    private RenderFragment GetStringFragment(PropertyInfo propertyInfo)
    {
            return new RenderFragment(
    @<div><div class="col-6 mt-3">@propertyInfo.Name</div><div class="col-6 mt-3"><Radzen.Blazor.RadzenTextBox ValueChanged=@(p => HandleStringPropertyChanged(p, propertyInfo.Name))></Radzen.Blazor.RadzenTextBox></div></div>
    );
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(Data!.UserName) || string.IsNullOrWhiteSpace(Data.Password))
        {
            await DialogService.OpenAsync("Authentication error", ds =>
    @<div>
        Please specify authentication credentials when logging in
    </div>
    );

            return;
        }
        else
        {
            await DialogService.OpenAsync("Success", ds =>
    @<div>Success</div>
    );
        }
    }

    private async Task HandleRegistration()
    {
        var isValid = !string.IsNullOrWhiteSpace(this.Data!.Password) && this.Data!.Password == this.Data.PasswordConfirmation;

        if (!isValid)
        {

            await DialogService.OpenAsync("Passwords do not match", ds =>
    @<div>
        <h2>Passwords do not match</h2>
        <Radzen.Blazor.RadzenButton Text="Ok" Click="() => ds.Close(true)"></Radzen.Blazor.RadzenButton>
    </div>
    );

            return;
        }

        await DialogService.OpenAsync("Successfully registrated", ds =>
    @<div>
        Successfully registrated with username @this.Data!.UserName and password @this.Data.Password;
    </div>
    );
    }

    private void HandleStringPropertyChanged(string value, string propertyName)
    {
        this.Data!.GetType().GetProperties().First(p => p.Name == propertyName).SetValue(Data, value);
    }
}
