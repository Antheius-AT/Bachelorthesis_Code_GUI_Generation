@using Attribute_Reflection_UseCase1_UserInteraction.Templates
@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase1
@using System.Reflection.Metadata
@using System.Reflection
@using Radzen

@inject DialogService DialogService

@if (Data != null)
{
    foreach (var property in Data.GetType().GetProperties())
    {
        <div class="row">@GetRenderFragment(property)</div>
    }

    if (Data.GetType().GetCustomAttributes().Any(p => p.GetType() == typeof(InputFormAttribute)))
    {
        <Radzen.Blazor.RadzenButton class=mt-3 Click="HandleLogin" Text=Login></Radzen.Blazor.RadzenButton>
    }
}

@code {
    private Dictionary<Type, Type> typeMap = new Dictionary<Type, Type>()
    {
        {typeof(string), typeof(StringTemplate)},
    };

    private Dictionary<string, string> propertyBindingMap;

    protected override void OnInitialized()
    {
        propertyBindingMap = new Dictionary<string, string>();

        if (Data != null)
        {
            foreach (var item in Data.GetType().GetProperties())
            {
                if (item.GetValue(Data) == null)
                {
                    item.SetValue(Data, string.Empty);
                }

                propertyBindingMap.Add(item.Name, item.GetValue(Data)!.ToString());
            }
        }
    }

    [Parameter]
    public LoginModel? Data { get; set; }

    private RenderFragment GetRenderFragment(PropertyInfo propertyInfo)
    {
        if (typeMap.ContainsKey(propertyInfo.PropertyType))
        {
            var binding = propertyBindingMap[propertyInfo.Name];
            return new RenderFragment(
    @<div><div class="col-6 mt-3">@propertyInfo.Name</div><div class="col-6 mt-3"><Radzen.Blazor.RadzenTextBox @bind-Value="binding"></Radzen.Blazor.RadzenTextBox></div></div>
    );
        }
        else
        {
            throw new NotImplementedException();
        }
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(Data!.UserName) || string.IsNullOrWhiteSpace(Data.Password))
        {
            await DialogService.OpenAsync("Authentication error", ds =>
    @<div>
        Please specify authentication credentials when logging in
    </div>
    );

            return;
        }
    }
}
