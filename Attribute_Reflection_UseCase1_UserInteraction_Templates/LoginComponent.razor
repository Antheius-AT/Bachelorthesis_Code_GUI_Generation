@using Attribute_Reflection_UseCase1_UserInteraction_Templates.Helpers
@using Attribute_Reflection_UseCase1_UserInteraction_Templates.Templates
@using Models
@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase1
@using System.Reflection.Metadata
@using System.Reflection
@using Radzen

@inject DialogService DialogService

@if (Data != null)
{
    foreach (var property in Data.GetType().GetProperties())
    {
        var template = this.DecideTemplate(property);
        <DynamicComponent Type="template"></DynamicComponent>
    }

    if (Data.GetType().GetCustomAttributes().Any(p => p.GetType() == typeof(AuthenticationFormAttribute)))
    {
        <Radzen.Blazor.RadzenButton class=mt-3 Click="HandleLogin" Text=Login></Radzen.Blazor.RadzenButton>
        <Radzen.Blazor.RadzenButton class=mt-3 Click=HandleRegistration Text=Register></Radzen.Blazor.RadzenButton>
    }
}

@code {
    [Parameter]
    public LoginModel? Data { get; set; }

    [Parameter]
    public PerformanceMonitor? Monitor { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Monitor!.Stop();
        }
    }

    private TemplateResult DecideTemplate(PropertyInfo info)
    {
        var asm = Assembly.GetExecutingAssembly();
        var templates = asm.GetTypes().Where(t => t.IsAssignableTo(typeof(TemplateBase)));
        var attributes = info.GetCustomAttributes().ToArray();

        if (info.PropertyType == typeof(string))
        {
            return GetStringTemplate(templates, attributes, info);
        }
        else
        {
            throw new NotImplementedException();
        }
    }

    private TemplateResult GetStringTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
    {
        var template = ApplyFurtherTemplateConstraints(templates, attributes);

        var value = info.GetValue(Data);

        return new TemplateResult(template, value!);
    }

    private Type ApplyFurtherTemplateConstraints(IEnumerable<Type> templates, Attribute[] attributes)
    {
        bool isEditable = attributes.Any(a => a.GetType() == typeof(EditableAttribute));
        var stringLengthAttribute = attributes.FirstOrDefault(a => a.GetType() == typeof(StringLengthAttribute)) as StringLengthAttribute;

        if (isEditable)
        {
            templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(EditableAttribute)));
        }

        if (stringLengthAttribute != null)
        {
            if (stringLengthAttribute.MaxLength > 50)
            {
                templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(MultilineAttribute)));
            }
            else
            {
                templates = templates.Where(t => !t.GetCustomAttributes().Any(a => a.GetType() == typeof(MultilineAttribute)));
            }
        }

        if (templates.Count() > 1)
        {
            throw new InvalidOperationException("Property meta data not specific enough. Could not map to single template");
        }

        return templates.First();
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(Data!.UserName) || string.IsNullOrWhiteSpace(Data.Password))
        {
            await DialogService.OpenAsync("Authentication error", ds =>
    @<div>
        Please specify authentication credentials when logging in
    </div>
    );

            return;
        }
        else
        {
            await DialogService.OpenAsync("Success", ds =>
    @<div>Success</div>
    );
        }
    }

    private async Task HandleRegistration()
    {
        var isValid = !string.IsNullOrWhiteSpace(this.Data!.Password) && this.Data!.Password == this.Data.PasswordConfirmation;

        if (!isValid)
        {

            await DialogService.OpenAsync("Passwords do not match", ds =>
    @<div>
        <h2>Passwords do not match</h2>
        <Radzen.Blazor.RadzenButton Text="Ok" Click="() => ds.Close(true)"></Radzen.Blazor.RadzenButton>
    </div>
    );

            return;
        }

        await DialogService.OpenAsync("Successfully registrated", ds =>
    @<div>
        Successfully registrated with username @this.Data!.UserName and password @this.Data.Password;
    </div>
    );
    }

    private void HandleStringPropertyChanged(string value, string propertyName)
    {
        this.Data!.GetType().GetProperties().First(p => p.Name == propertyName).SetValue(Data, value);
    }
}
