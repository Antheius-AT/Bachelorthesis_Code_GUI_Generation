@using Models
@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase2
@using System.Reflection
@using System.Collections

@if (Details != null)
{
    foreach (var item in Details.GetType().GetProperties())
    {
        @GetRenderFragment(item, Details)
        ;
    }
}

@code {
    [Parameter]
    public PersonalDetails? Details { get; set; }

    [Parameter]
    public PerformanceMonitor? PerformanceMonitor { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            PerformanceMonitor!.Stop();
        }
    }

    private RenderFragment GetRenderFragment(PropertyInfo info, object instance)
    {
        if (info.PropertyType == typeof(string))
        {
            return GetStringRenderFragment(info, instance);
        }
        else if (info.PropertyType == typeof(int))
        {
            return GetIntegerRenderFragment(info, instance);
        }
        else if (info.PropertyType.IsAssignableTo(typeof(IEnumerable)))
        {
            return GetCollectionFragment(info, instance);
        }
        else
        {
            return GetContainerTypeFragment(info);
        }
    }

    private RenderFragment GetStringRenderFragment(PropertyInfo info, object instance)
    {
        var value = info.GetValue(instance)?.ToString() ?? string.Empty;
        var attributes = info.GetCustomAttributes();

        var stringLengthAttribute = attributes.FirstOrDefault(a => a.GetType() == typeof(StringLengthAttribute)) as StringLengthAttribute;
        var isReadOnly = attributes.Any(a => a.GetType() == typeof(ReadOnlyAttribute));

        if (isReadOnly)
        {
            return GetReadOnlyFragment(value, info.Name);
        }
        else
        {
            throw new NotImplementedException("Editable properties not supported");
        }
    }

    private RenderFragment GetIntegerRenderFragment(PropertyInfo info, object instance)
    {
        var value = Convert.ToInt32(info.GetValue(instance));
        var attributes = info.GetCustomAttributes();

        var isReadOnly = attributes.Any(a => a.GetType() == typeof(ReadOnlyAttribute));

        if (isReadOnly)
        {
            return GetReadOnlyFragment(value, info.Name);
        }
        else
        {
            throw new NotImplementedException("Editable properties not supported");
        }
    }

    private RenderFragment GetReadOnlyFragment(object value, string propertyName)
    {
        return new RenderFragment(
    @<div><h2>@propertyName</h2> @value</div>
           );
    }

    private RenderFragment GetCollectionFragment(PropertyInfo info, object instance)
    {
        if (!info.PropertyType.IsAssignableTo(typeof(IEnumerable)))
        {
            throw new ArgumentException(nameof(info), "Argument must be a property of an enumerable type");
        }

        var value = info.GetValue(instance) as IEnumerable<object>;

        if (value == null)
        {
            throw new ArgumentException(nameof(info), "Argument could not be instantiated as Enumerable");
        }

        return new RenderFragment(
    @<RadzenCard class="mt-3">
        <div class="mt-3">
            <table class="table table-hover">
                <thead>
                    <tr>
                        @foreach (var property in value.First().GetType().GetProperties())
                        {
                                <th>@property.Name</th>
                        }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in value)
                    {
                            <tr>
                                @foreach (var property in item.GetType().GetProperties())
                            {
                                    <td>
                                        @property.GetValue(item)
                                    </td>
                            }
                            </tr>
                    }
                    </tbody>
                </table>
            </div>
        </RadzenCard>
    );
    }

    private RenderFragment GetContainerTypeFragment(PropertyInfo nonBasicTypeProperty)
    {
        var instance = Activator.CreateInstance(nonBasicTypeProperty.PropertyType);

        return new RenderFragment(
    @<Radzen.Blazor.RadzenCard class=mt-3>
        <div>
            <div class=row>
                @foreach (var item in nonBasicTypeProperty.PropertyType.GetProperties())
                {
                        <div class="col-12 col-lg-6">@GetRenderFragment(item, instance!)</div>
                }
                </div>
            </div>
        </Radzen.Blazor.RadzenCard>
    );
    }
    }