@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase2
@using System.Collections
@using Attribute_Reflection_UseCase2_UserInteraction.Templates
@using System.Reflection
@using Radzen

@inject DialogService DialogService

@if (Details != null)
{
	foreach (var item in Details.GetType().GetProperties())
	{
		if (!basicTypes.Contains(item.PropertyType))
		{
			<div>@GetContainerTypeFragment(item)</div>
		}
		else
		{
			<div>@GetBasicTypeRenderFragment(item)</div>
		}
	}

	if (Details.GetType().GetCustomAttributes().Any(a => a.GetType() == typeof(EditableAttribute)))
	{
		<Radzen.Blazor.RadzenButton class=mt-3 Text=Save Click=this.SaveData></Radzen.Blazor.RadzenButton>
	}
}

@code {
	// Storing instances in memory to prevent problems arising from calling Activator create instance every time (references not being kept)
	private List<object> instanceCollection;

	// An object mapping a property name to the complete path by which values can be bound to it, relative to the object
	// passed as parameter and stored in Details
	private Dictionary<string, List<string>> propertyBindingPathMap;

	private List<Type> basicTypes = new List<Type>()
	{
		typeof(bool),
		typeof(string),
		typeof(int),
		typeof(double)
	};

	[Parameter]
	public PersonalDetails? Details { get; set; }

	protected override void OnInitialized()
	{
		this.instanceCollection = new List<object>();
		instanceCollection.Add(Details);

		propertyBindingPathMap = new Dictionary<string, List<string>>();

		// The idea is to build a binding map consisting of a key (the property name) and the property to use for reading/writing.
		if (Details != null)
		{
			foreach (var item in Details.GetType().GetProperties())
			{
				if (!basicTypes.Contains(item.PropertyType) && !item.PropertyType.IsAssignableTo(typeof(IEnumerable)))
				{
					instanceCollection.Add(Activator.CreateInstance(item.PropertyType)!);

					// Limitation to only go to the next level of depth. Divide and conquer approach would be better if this was to be expanded upon.
					foreach (var subItem in item.PropertyType.GetProperties())
					{
						propertyBindingPathMap.Add(subItem.Name, new List<string>() { this.Details.GetType().Name, item.Name, subItem.Name });
					}
				}
				else if (!basicTypes.Contains(item.PropertyType) && item.PropertyType.IsAssignableTo(typeof(IEnumerable)))
				{
					// Think about how to map collection
				}
				else
				{
					propertyBindingPathMap.Add(item.Name, new List<string>() { item.Name });
				}
			}
		}
	}

	private RenderFragment GetContainerTypeFragment(PropertyInfo nonBasicTypeProperty)
	{
		if (nonBasicTypeProperty.PropertyType.IsAssignableTo(typeof(IEnumerable)))
		{
			return new RenderFragment(
	@<Radzen.Blazor.RadzenCard class=mt-3><div><CollectionView Data=@(nonBasicTypeProperty.GetValue(Details) as IEnumerable<object>)></CollectionView></div></Radzen.Blazor.RadzenCard>
	);
		}
		else
		{
			return new RenderFragment(
	@<Radzen.Blazor.RadzenCard class=mt-3>
		<div>
			<div class=row>
				@foreach (var item in nonBasicTypeProperty.PropertyType.GetProperties())
					{
						<div class="col-12 col-lg-6">@GetBasicTypeRenderFragment(item)</div>
					}
				</div>
			</div>
		</Radzen.Blazor.RadzenCard>
	);
		}
	}

	private RenderFragment GetBasicTypeRenderFragment(PropertyInfo propertyInfo)
	{
		// Think about how to use generated binding map to bind values in on changed methods.

		IEnumerable<string> propertyPathList = Enumerable.Empty<string>();

		if (this.propertyBindingPathMap.ContainsKey(propertyInfo.Name))
		{
			propertyPathList = propertyBindingPathMap[propertyInfo.Name];
		}

		if (propertyInfo.PropertyType == typeof(string))
		{
			return new RenderFragment(
	@<div>@propertyInfo.Name <Radzen.Blazor.RadzenTextBox class="mt-3" Value=@GetPropertyValue(propertyInfo).ToString() ValueChanged=@((val) => StringValueChanged(val, propertyPathList)) Placeholder=@propertyInfo.Name></Radzen.Blazor.RadzenTextBox></div>
	);
		}
		else if (propertyInfo.PropertyType == typeof(int))
		{
			return new RenderFragment(@<div class=col-6>@propertyInfo.Name <Radzen.Blazor.RadzenNumeric Value=@Convert.ToInt32(GetPropertyValue(propertyInfo)) ValueChanged=@((val) => IntValueChanged(val, propertyPathList)) class=mt-3 TValue=int></Radzen.Blazor.RadzenNumeric></div>
	);
		}
		else
		{
			throw new ArgumentException(nameof(propertyInfo), "Non basic type detected");
		}
	}

	private async Task SaveData()
	{
		// View is borrowed for demonstration and confirmation that changes were made to object.
		await DialogService.OpenAsync("Successfully saved in database", ds =>
	@<div><PersonalDetailsComponent Details=Details></PersonalDetailsComponent></div>
	);
	}

	private object GetPropertyValue(PropertyInfo property)
	{
		var instance = this.instanceCollection.Single(o => o.GetType().GetProperties().Any(p => p.Name == property.Name));

		return property.GetValue(instance)!;
	}

	private void StringValueChanged(string newValue, IEnumerable<string> propertyPathList)
	{
		var referenceTuple = this.GetPropertyAndObjectReferenceRecursively(propertyPathList, this.Details!.GetType());

		var instance = referenceTuple.Item1;
		var property = referenceTuple.Item2;

		property.SetValue(instance, newValue);

		if (instance.GetType() != typeof(PersonalDetails))
		{
			var upperLevelProperty = typeof(PersonalDetails).GetProperties().First(p => p.PropertyType == instance.GetType());

			upperLevelProperty.SetValue(Details, instance);
		}
	}

	private void IntValueChanged(int newValue, IEnumerable<string> propertyPathList)
	{
		var referenceTuple = this.GetPropertyAndObjectReferenceRecursively(propertyPathList, this.Details!.GetType());

		var instance = referenceTuple.Item1;
		var property = referenceTuple.Item2;

		property.SetValue(instance, newValue);

		if (instance.GetType() != typeof(PersonalDetails))
		{
			var upperLevelProperty = typeof(PersonalDetails).GetProperties().First(p => p.PropertyType == instance.GetType());

			upperLevelProperty.SetValue(Details, instance);
		}
	}

	private (object, PropertyInfo) GetPropertyAndObjectReferenceRecursively(IEnumerable<string> propertyPathList, Type currentBase)
	{
		// Make this work on deeper nested types too. Probably need to use activator create instance?
		if (!propertyPathList.Any())
		{
			throw new ArgumentException(nameof(propertyPathList), "PAth list must not be empty");
		}

		if (propertyPathList.Count() == 1)
		{
			var instance = this.instanceCollection.Single(p => p.GetType() == currentBase);
			var property = currentBase.GetProperties().Single(p => p.Name == propertyPathList.First());

			return (instance!, property);
		}

		if (propertyPathList.Count() == 2)
		{
			var instance = this.instanceCollection.Single(p => p.GetType() == currentBase);
			var property = currentBase.GetProperties().Single(p => p.Name == propertyPathList.Skip(1).First());
			
			return (instance!, property);
		}

		var newList = propertyPathList.Skip(1).ToArray();

		var newBaseName = newList.First();

		currentBase = currentBase.GetProperties().Single(p => p.Name == newBaseName).PropertyType;
		var debug = currentBase.Name;

		return this.GetPropertyAndObjectReferenceRecursively(newList, currentBase);
	}
}
