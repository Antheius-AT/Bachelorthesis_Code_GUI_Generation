@using Attribute_Reflection_UseCase2_UserInteraction_Templates.Helpers
@using Attribute_Reflection_UseCase2_UserInteraction_Templates.Templates
@using Models
@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase2
@using System.Reflection
@using Radzen
@using Radzen.Blazor
@using System.Collections

@if (Details != null)
{
	foreach (var propertyInfo in Details.GetType().GetProperties())
	{
		TemplateResult template = DecideTemplate(propertyInfo);
		var parameters = new Dictionary<string, object>()
		{
			{"Value", template.Value},
			{"Label", template.Label}
		};

		<DynamicComponent Type=template.TemplateType Parameters="parameters"></DynamicComponent>
		<br />
	}
}

@code {
	[Parameter]
	public PersonalDetails? Details { get; set; }

	private TemplateResult DecideTemplate(PropertyInfo info)
	{
		var asm = Assembly.GetExecutingAssembly();
		var templates = asm.GetTypes().Where(t => typeof(TemplateBase).IsAssignableFrom(t)).ToArray();
		var attributes = info.GetCustomAttributes().ToArray();

		if (info.PropertyType == typeof(int))
		{
			return GetIntegerTemplate(templates, attributes, info);
		}
		else if (info.PropertyType == typeof(bool))
		{
			return GetBoolTemplate(templates, attributes, info);
		}
		else if (info.PropertyType == typeof(string))
		{
			return GetStringTemplate(templates, attributes, info);
		}
		else if (info.PropertyType.GetInterfaces().Any(p => p.IsAssignableTo(typeof(IEnumerable))))
		{
			return GetCollectionViewTemplate(templates, attributes, info);
		}
		else
		{
			return GetContainerViewTemplate(templates, attributes, info);
		}
	}

	private TemplateResult GetStringTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(string)).ToArray();
		Console.WriteLine(info.Name);
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Details)!;

		return new TemplateResult(template, value, info.Name);
	}

	private TemplateResult GetBoolTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(bool)).ToArray();
		Console.WriteLine(info.Name);
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Details);

		return new TemplateResult(template, Convert.ToBoolean(value), info.Name);
	}

	private TemplateResult GetIntegerTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		Console.WriteLine(info.Name);
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(int)).ToArray();
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Details);

		return new TemplateResult(template, value!, info.Name);
	}

	private TemplateResult GetCollectionViewTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(IEnumerable)).ToArray();

		Console.WriteLine(info.Name);
		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Details);

		return new TemplateResult(template, value!, info.Name);

	}

	private TemplateResult GetContainerViewTemplate(IEnumerable<Type> templates, Attribute[] attributes, PropertyInfo info)
	{
		templates = templates.Where(t => t.GetCustomAttribute<ValueKindAttribute>()?.ValueKind == typeof(object)).ToArray();
		Console.WriteLine(info.Name);

		var template = ApplyFurtherTemplateConstraints(templates, attributes);

		var value = info.GetValue(Details);

		return new TemplateResult(template, value!, info.Name);
	}

	private Type ApplyFurtherTemplateConstraints(IEnumerable<Type> templates, Attribute[] attributes)
	{
		bool isEditable = attributes.Any(a => a.GetType() == typeof(EditableAttribute));
		bool isReadOnly = attributes.Any(a => a.GetType() == typeof(ReadOnlyAttribute));

		var stringLengthAttribute = attributes.FirstOrDefault(a => a.GetType() == typeof(StringLengthAttribute)) as StringLengthAttribute;

		if (isEditable)
		{
			templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(EditableAttribute))).ToArray();
		}

		if (isReadOnly)
		{
			templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(ReadOnlyAttribute))).ToArray();
		}

		if (stringLengthAttribute != null)
		{
			if (stringLengthAttribute.MaxLength > 49)
			{
				templates = templates.Where(t => t.GetCustomAttributes().Any(a => a.GetType() == typeof(MultilineAttribute))).ToArray();
			}
			else
			{
				templates = templates.Where(t => !t.GetCustomAttributes().Any(a => a.GetType() == typeof(MultilineAttribute))).ToArray();
			}
		}

		if (templates.Count() > 1)
		{
			throw new InvalidOperationException("Constraints not specific enough. Could not map to single template");
		}
		else if (!templates.Any())
		{
			throw new InvalidOperationException("No matching template found.");
		}

		return templates.First();
	}

}