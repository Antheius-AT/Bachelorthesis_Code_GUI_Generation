@using Attribute_Reflection_UseCase2_UserInteraction_Templates.Helpers
@using Models.Metadata
@using System.Reflection
@inherits TemplateBase
@attribute [ValueKind(typeof(object))]
@attribute [Editable]

@if (Value != null)
{
    <RadzenCard>
        <div class="row">
            @foreach (var item in Value.GetType().GetProperties())
            {
                if (item.PropertyType == typeof(string))
                {
                    var value = item.GetValue(Value)!.ToString()!;

                    <div class="col-12 col-lg-6">
                        @item.Name
                        <RadzenTextBox Value="@value" ValueChanged="(val) => HandleValueChanged(val, item, Value)" Placeholder="@item.Name"></RadzenTextBox>
                    </div>
                }
                else
                {
                    var value = Convert.ToInt32(item.GetValue(Value));

                    <div class="col-12 col-lg-6">
                        @item.Name
                        <RadzenNumeric TValue="int" Value="@value" ValueChanged="(val) => HandleValueChanged(val, item, Value)" Placeholder="@item.Name"></RadzenNumeric>
                    </div>
                }
            }
        </div>

    </RadzenCard>
}

@code {
    [Parameter]
    public object? Value { get; set; }

    private void HandleValueChanged(object value, PropertyInfo info, object instance)
    {
        info.SetValue(instance, value);

        if (ValueChanged.HasDelegate)
        {
            this.ValueChanged.InvokeAsync(new ValueChangedArguments(value, info, instance));
        }
    }
}
