@using Attribute_Reflection_UseCase3_UserInteraction_RenderFragment.Helpers
@using Attribute_Reflection_UseCase3_UserInteraction_Templates.Helpers
@using Attribute_Reflection_UseCase3_UserInteraction_Templates.Templates
@using Models
@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase3
@using System.Reflection
@using System.Collections

@if (ToolBox != null)
{
    foreach (var propertyInfo in ToolBox.GetType().GetProperties())
    {
        TemplateResult template = DecideTemplate(propertyInfo);
        var parameters = new Dictionary<string, object>()
        {
            {"Value", template.Value},
            {"Label", template.Label},
        };

        <DynamicComponent Type=template.TemplateType Parameters="parameters"></DynamicComponent>
    }
}

@code {
    [Parameter]
    public EditToolBox? ToolBox { get; set; }

    [Parameter]
    public PerformanceMonitor? PerformanceMonitor { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            PerformanceMonitor!.Stop();
        }
    }

    private TemplateResult DecideTemplate(PropertyInfo info)
    {
        return GetTemplate(info);
    }

    private TemplateResult GetTemplate(PropertyInfo info)
    {
        var predefinedTemplate = WellKnownStyles.ImageEditorStyles[info.PropertyType];

        var value = info.GetValue(ToolBox);

        return new TemplateResult(predefinedTemplate, value!, info.Name);
    }
}
