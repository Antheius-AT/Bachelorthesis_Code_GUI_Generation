@using Basic_Reflection_UseCase1_Display_Template.Helpers
@using Basic_Reflection_UseCase1_Display_Template.Templates
@using Models
@using Models.UseCases.DisplayOnly.UseCase1
@using System.Reflection
@using System.Collections
@using Microsoft.AspNetCore.Components
@using System.Diagnostics

@if (Model != null)
{
	@foreach (var item in Model.GetType().GetProperties())
	{
		var result = this.GetTemplateResult(item);
		var parameters = new Dictionary<string, object>()
		{
			{"Value", result.Value!},
			{"Label", result.Label},
		};

		<DynamicComponent Type=result.TemplateType Parameters="@parameters"></DynamicComponent>
		<br />
	}
}

@code {
	[Parameter]
	public SensorData? Model { get; set; }

	[Parameter]
	public PerformanceMonitor? Monitor { get; set; }

	private Dictionary<Type, Type>? typeMap;

	protected override void OnInitialized()
	{
		Model!.StateHasChanged += (_, _) => this.StateHasChanged();

		typeMap = new Dictionary<Type, Type>()
		{
			{typeof(double), typeof(DoubleTemplate)},
			{typeof(bool), typeof(BoolTemplate)},
		};
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			Monitor!.Stop();
		}
	}

	private TemplateResult GetTemplateResult(PropertyInfo property)
	{
		if (typeMap!.ContainsKey(property.PropertyType))
		{
			return new TemplateResult(typeMap![property.PropertyType], property.GetValue(Model), property.Name);
		}
		else
		{
			throw new ArgumentException(nameof(property), "Property type not registered");
		}
	}
}