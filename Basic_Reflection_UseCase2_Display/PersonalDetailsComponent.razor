@using Basic_Reflection_UseCase2_Display_Template.Helpers
@using Basic_Reflection_UseCase2_Display_Template.Templates
@using Models
@using Models.UseCases.DisplayOnly.UseCase2
@using System.Reflection
@using Radzen
@using Radzen.Blazor
@using System.Collections

@if (Details != null)
{
	foreach (var propertyInfo in Details.GetType().GetProperties())
	{
		var result = this.GetTemplateResult(propertyInfo);
		var parameters = new Dictionary<string, object>()
		{
			{"Data", result.Value!},
			{"Label", result.Label},
		};
		
		<DynamicComponent Type=result.TemplateType Parameters="parameters"></DynamicComponent>
		<br />
	}
}

@code {
	[Parameter]
	public PersonalDetails? Details { get; set; }

	[Parameter]
	public PerformanceMonitor? PerformanceMonitor { get; set; }

	private Dictionary<Type, Type>? typeMap;

	protected override void OnInitialized()
	{
		typeMap = new Dictionary<Type, Type>()
		{
			{typeof(string), typeof(StringTemplate)},
			{typeof(int), typeof(IntegerTemplate)},
		};
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			PerformanceMonitor!.Stop();
		}
	}

	private TemplateResult GetTemplateResult(PropertyInfo property)
	{
		if (typeMap!.ContainsKey(property.PropertyType))
		{
			var controlType = typeMap[property.PropertyType];
			return new TemplateResult(controlType, property.GetValue(Details), property.Name);
		}
		else if (property.PropertyType.GetInterfaces().Any(p => p.IsAssignableTo(typeof(IEnumerable))))
		{
			return new TemplateResult(typeof(CollectionView), property.GetValue(Details), property.Name);
		}
		else
		{
			return new TemplateResult(typeof(ContainerView), property.GetValue(Details)!, property.Name);
		}
	}
}