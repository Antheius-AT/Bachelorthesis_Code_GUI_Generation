@page "/"
@using GUI_Generator_UseCase1_Display.Helpers
@using GUI_Generator_UseCase1_Display.InitialExperiments
@using GeneratorSharedComponents
@using GeneratorSharedComponents.Abstractions
@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase1
@using Radzen.Blazor
@using System.Reflection
@using System.Xml.Linq

@inject IXMLSpecificationConverter<SensorData> xmlConverter

<AdaptiveInterfaceGeneratorView ModelData="sensorData" DeviceModel="deviceModel" UserModel="userModel" InterfaceSpecification="interfaceSpecification"></AdaptiveInterfaceGeneratorView>

@code {
    private DeviceModel<SensorData> deviceModel;
    private InterfaceSpecification<SensorData> interfaceSpecification;
    private UserModel userModel;
    private SensorData sensorData;

    protected override void OnInitialized()
    {
        sensorData = new SensorData();

        var asm = Assembly.GetExecutingAssembly();
        var widgets = asm.GetTypes().GetDescendantElementsOfType<WidgetBase>().ToArray();

        var xml = BuildSpecification();
        var elementCollection = xmlConverter.TransformToElementCollection(xml);

        foreach (var item in elementCollection)
        {
            // Debugging
            Console.WriteLine(item.ElementType);    
        }

        interfaceSpecification = new InterfaceSpecification<SensorData>(elementCollection, null!);
        userModel = new UserModel();
        deviceModel = new DeviceModel<SensorData>(widgets, null!, HeuristicCalculator.CalculateWidgetScore);
    }

    private XElement BuildSpecification()
    {
        var avgTempElement = new XElement("AvgTemperature", new XAttribute("Type", "conditional"), new XAttribute("SubType", "float"), new XAttribute("Condition", "IsOn"));
        var avgPowerConsumptionelement = new XElement("AvgPowerConsumption", new XAttribute("Type", "conditional"), new XAttribute("SubType", "float"), new XAttribute("Condition", "IsOn"));
        var currentHumidityElement = new XElement("CurrentHumidity", new XAttribute("Type", "conditional"), new XAttribute("SubType", "float"), new XAttribute("Condition", "IsOn"));
        var currentTemperatureElement = new XElement("CurrentTemperature", new XAttribute("Type", "conditional"), new XAttribute("SubType", "float"), new XAttribute("Condition", "IsOn"));

        var hasPowerElement = new XElement("IsPoweredOn", new XAttribute("Type", "bool"));

        var rootElement = new XElement("Sensor", avgTempElement, avgPowerConsumptionelement, currentHumidityElement, currentTemperatureElement, hasPowerElement);

        return rootElement;
    }
}
