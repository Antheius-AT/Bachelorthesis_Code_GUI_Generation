@page "/"
@using GUI_Generator_UseCase1_Interaction.Helpers
@using GeneratorSharedComponents
@using GeneratorSharedComponents.Abstractions
@using Models
@using Models.Metadata
@using Models.UseCases.IncludingUserInteraction.UseCase1
@using Radzen.Blazor
@using System.Reflection
@using System.Xml.Linq

@inject IXMLSpecificationConverter<LoginModel> xmlConverter

@if (!showGui)
{
	<RadzenButton Click="() => showGui = true" Text="Render GUI"></RadzenButton>
}
else
{
	performanceMonitor.Start();
	InitializeGenerator();
	<AdaptiveInterfaceGeneratorView PerformanceMonitor="performanceMonitor" ModelData="loginModel" DeviceModel="deviceModel" UserModel="userModel" InterfaceSpecification="interfaceSpecification"></AdaptiveInterfaceGeneratorView>
}

@code {
	private DeviceModel<LoginModel> deviceModel;
	private PerformanceMonitor performanceMonitor;
	private InterfaceSpecification<LoginModel> interfaceSpecification;
	private UserModel userModel;
	private LoginModel loginModel;
	private bool showGui;

	protected override void OnInitialized()
	{
		loginModel = new LoginModel();
		performanceMonitor = new PerformanceMonitor();
	}

	private void InitializeGenerator()
	{
		var asm = Assembly.GetExecutingAssembly();
		var widgets = asm.GetTypes().GetDescendantElementsOfType<WidgetBase>().ToArray();

		var xml = BuildSpecification();

		var elementCollection = xmlConverter.TransformToElementCollection(xml);

		interfaceSpecification = new InterfaceSpecification<LoginModel>(elementCollection, null!);
		userModel = new UserModel();
		deviceModel = new DeviceModel<LoginModel>(widgets, null!, HeuristicCalculator.CalculateWidgetScore);
	}

	private XElement BuildSpecification()
	{
		var rootelement = new XElement("LoginForm", new XAttribute("Type", "root"));

		var loginContainerElement = new XElement("FormContents", new XAttribute("type", "container"), new XAttribute("Name", "loginFormContents"), new XAttribute("XmlIgnore", "true"), new XAttribute("Label", "Login details"));
		var registrationContainerElement = new XElement("FormContents", new XAttribute("type", "container"), new XAttribute("Name", "registrationFormContents"), new XAttribute("XmlIgnore", "true"), new XAttribute("Label", "Registration details"));

		var usernameElement = new XElement("UserName", new XAttribute("Type", "string"), new XAttribute("Binding", "UserName"), new XAttribute("Label", "User name"));
		var passwordElement = new XElement("Password", new XAttribute("Type", "string"), new XAttribute("Binding", "Password"), new XAttribute("Label", "Password"));
		var passwordConfirmation = new XElement("Confirmation", new XAttribute("Type", "string"), new XAttribute("Binding", "PasswordConfirmation"), new XAttribute("Label", "Confirm password"));
		var loginButtonElement = new XElement("FormAction", new XAttribute("Type", "action"), new XAttribute("ActionTypeRef", "loginFormContents"), new XAttribute("Label", "Login"));
		var registerButtonElement = new XElement("FormAction", new XAttribute("Type", "action"), new XAttribute("ActionTypeRef", "registrationFormContents"), new XAttribute("Label", "Register"));

		loginContainerElement.Add(usernameElement);
		loginContainerElement.Add(passwordElement);

		registrationContainerElement.Add(usernameElement);
		registrationContainerElement.Add(passwordElement);
		registrationContainerElement.Add(passwordConfirmation);

		rootelement.Add(loginContainerElement);
		rootelement.Add(registrationContainerElement);
		rootelement.Add(loginButtonElement);
		rootelement.Add(registerButtonElement);

		return rootelement;
	}
}
