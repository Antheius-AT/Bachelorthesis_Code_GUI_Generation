@page "/"
@using GUI_Generator_UseCase1_Display.Helpers
@using GeneratorSharedComponents
@using GeneratorSharedComponents.Abstractions
@using Models
@using Models.Metadata
@using Models.UseCases.DisplayOnly.UseCase2
@using Radzen.Blazor
@using System.Reflection
@using System.Xml.Linq

@inject IXMLSpecificationConverter<PersonalDetails> xmlConverter

@if (!showGui)
{
    <RadzenButton Click="() => showGui = true" Text="Render GUI"></RadzenButton>
}
else
{
    performanceMonitor.Start();
    InitializeGenerator();
    <AdaptiveInterfaceGeneratorView PerformanceMonitor="performanceMonitor" ModelData="personalDetails" DeviceModel="deviceModel" UserModel="userModel" InterfaceSpecification="interfaceSpecification"></AdaptiveInterfaceGeneratorView>
}

@code {
    private DeviceModel<PersonalDetails> deviceModel;
    private PerformanceMonitor performanceMonitor;
    private InterfaceSpecification<PersonalDetails> interfaceSpecification;
    private UserModel userModel;
    private PersonalDetails personalDetails;
    private bool showGui;

    protected override void OnInitialized()
    {
        personalDetails = new PersonalDetails();
        performanceMonitor = new PerformanceMonitor();
    }

    private void InitializeGenerator()
    {
        var asm = Assembly.GetExecutingAssembly();
        var widgets = asm.GetTypes().GetDescendantElementsOfType<WidgetBase>().ToArray();

        var xml = BuildSpecification();

        var elementCollection = xmlConverter.TransformToElementCollection(xml);

        interfaceSpecification = new InterfaceSpecification<PersonalDetails>(elementCollection, null!);
        userModel = new UserModel();
        deviceModel = new DeviceModel<PersonalDetails>(widgets, null!, HeuristicCalculator.CalculateWidgetScore);        
    }

    private XElement BuildSpecification()
    {
        var rootelement = new XElement("PersonalDetails", new XAttribute("Type", "root"));

        var firstNameElement = new XElement("FirstName", new XAttribute("Type", "string"), new XAttribute("Binding", "FirstName"), new XAttribute("Label", "First name"));
        var lastNameElement = new XElement("LastName", new XAttribute("Type", "string"), new XAttribute("Binding", "LastName"), new XAttribute("Label", "Last name"));
        var genderElement = new XElement("Gender", new XAttribute("Type", "string"), new XAttribute("Binding", "Gender"), new XAttribute("Label", "Gender"));
        var ageElement = new XElement("Age", new XAttribute("Type", "int"), new XAttribute("Binding", "Age"), new XAttribute("Label", "Age"));

        var addressElement = new XElement("Address", new XAttribute("Type", "container"), new XAttribute("Binding", "Address"), new XAttribute("Label", "Address"));
        var streetElement = new XElement("Street", new XAttribute("Type", "string"), new XAttribute("Binding", "Street"), new XAttribute("Label", "Street"));
        var houseNumberElement = new XElement("HouseNumber", new XAttribute("Type", "string"), new XAttribute("Binding", "HouseNumber"), new XAttribute("Label", "House number"));
        var zipCodeElement = new XElement("ZipCode", new XAttribute("Type", "int"), new XAttribute("Binding", "ZipCode"), new XAttribute("Label", "Zip code"));
        var cityElement = new XElement("City", new XAttribute("Type", "string"), new XAttribute("Binding", "City"), new XAttribute("Label", "City"));

        var educationElement = new XElement("Educations", new XAttribute("Type", "array"), new XAttribute("Binding", "Educations"), new XAttribute("Label", "Education history"));

        addressElement.Add(streetElement, houseNumberElement, zipCodeElement, cityElement);
        rootelement.Add(firstNameElement, lastNameElement, genderElement, ageElement, addressElement);
        rootelement.Add(educationElement);

        return rootelement;
    }
}
